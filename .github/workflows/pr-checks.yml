name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Fast feedback for PR authors
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    
    - name: Quick compilation check
      run: |
        echo "🔍 Checking compilation for PR #${{ github.event.pull_request.number }}"
        ./gradlew compileKotlinMetadata compileCommonMainKotlinMetadata
    
    - name: Run fast tests
      run: |
        echo "🧪 Running fast test suite..."
        ./gradlew :composeApp:jvmTest --tests="*Domain*" --fail-fast || echo "No domain tests found yet"
    
    - name: Analyze PR changes
      run: |
        echo "=== PR Analysis Report ===" > pr-analysis.txt
        echo "PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}" >> pr-analysis.txt
        echo "Author: ${{ github.event.pull_request.user.login }}" >> pr-analysis.txt
        echo "Generated: $(date)" >> pr-analysis.txt
        echo "" >> pr-analysis.txt
        
        # Get changed files
        echo "## Changed Files" >> pr-analysis.txt
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD >> pr-analysis.txt
        
        # Analyze impact
        echo "## Impact Analysis" >> pr-analysis.txt
        DOMAIN_CHANGES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -c "domain/" || echo "0")
        TEST_CHANGES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -c "Test.kt" || echo "0")
        
        echo "Domain changes: $DOMAIN_CHANGES files" >> pr-analysis.txt
        echo "Test changes: $TEST_CHANGES files" >> pr-analysis.txt
        
        if [ $DOMAIN_CHANGES -gt 0 ] && [ $TEST_CHANGES -eq 0 ]; then
          echo "⚠️ Domain changes without corresponding tests" >> pr-analysis.txt
        elif [ $DOMAIN_CHANGES -gt 0 ] && [ $TEST_CHANGES -gt 0 ]; then
          echo "✅ Domain changes include test updates" >> pr-analysis.txt
        fi
    
    - name: Check architectural compliance
      run: |
        echo "## Architecture Compliance" >> pr-analysis.txt
        
        # Check if domain layer remains pure
        if git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep "domain/" | xargs grep -l "import.*compose\|import.*android" 2>/dev/null; then
          echo "❌ Domain layer purity violation detected" >> pr-analysis.txt
        else
          echo "✅ Domain layer remains pure" >> pr-analysis.txt
        fi
        
        # Check TDD adherence
        if [ $DOMAIN_CHANGES -gt $TEST_CHANGES ] && [ $DOMAIN_CHANGES -gt 1 ]; then
          echo "⚠️ Consider more test coverage for domain changes" >> pr-analysis.txt
        fi
    
    - name: Upload PR analysis
      uses: actions/upload-artifact@v4
      with:
        name: pr-analysis-${{ github.event.pull_request.number }}
        path: pr-analysis.txt
    
    - name: Comment PR with analysis
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('pr-analysis.txt')) {
            const analysis = fs.readFileSync('pr-analysis.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Automated PR Analysis\n\n\`\`\`\n${analysis}\n\`\`\``
            });
          }

  # Branch Protection Compliance
  branch-protection:
    name: Branch Protection Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check PR requirements
      run: |
        echo "=== Branch Protection Compliance ===" > branch-protection.txt
        echo "PR #${{ github.event.pull_request.number }}" >> branch-protection.txt
        echo "Base: ${{ github.event.pull_request.base.ref }}" >> branch-protection.txt
        echo "Head: ${{ github.event.pull_request.head.ref }}" >> branch-protection.txt
        echo "" >> branch-protection.txt
        
        # Validate branch naming
        if [[ "${{ github.event.pull_request.head.ref }}" =~ ^(feature|bugfix|hotfix|docs)/.+ ]]; then
          echo "✅ Branch naming follows convention" >> branch-protection.txt
        else
          echo "⚠️ Consider using feature/bugfix/hotfix/docs prefix" >> branch-protection.txt
        fi
        
        # Check for merge conflicts
        echo "## Merge Conflict Check" >> branch-protection.txt
        if git merge-tree $(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD) origin/${{ github.event.pull_request.base.ref }} HEAD | grep -q "<<<<<<< "; then
          echo "❌ Merge conflicts detected" >> branch-protection.txt
        else
          echo "✅ No merge conflicts" >> branch-protection.txt
        fi
    
    - name: Upload branch protection report
      uses: actions/upload-artifact@v4
      with:
        name: branch-protection-${{ github.event.pull_request.number }}
        path: branch-protection.txt
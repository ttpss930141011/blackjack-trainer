name: Security & Dependency Scanning

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday at 6 AM

jobs:
  # Adaptive Security Scanning - Scales with project needs
  security-analysis:
    name: Security Analysis (Progressive)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: wrapper
        # cache-cleanup removed due to Gradle 9.0 compatibility issues
    
    - name: Detect security analysis needs
      id: security-scope
      run: |
        # Determine if advanced security analysis is needed
        APP_FILES=$(find composeApp/src/commonMain/kotlin -path "*/application/*" -name "*.kt" | wc -l)
        DOMAIN_FILES=$(find composeApp/src/commonMain/kotlin -path "*/domain/*" -name "*.kt" | wc -l)
        
        # Check for security-sensitive patterns
        AUTH_PATTERNS=$(grep -r -l "password\|auth\|jwt\|token\|credential" composeApp/src/ --include="*.kt" | wc -l)
        NETWORK_PATTERNS=$(grep -r -l "http\|api\|network\|request" composeApp/src/ --include="*.kt" | wc -l)
        
        echo "Auth patterns found: $AUTH_PATTERNS"
        echo "Network patterns found: $NETWORK_PATTERNS"
        
        # Enable CodeQL for Stage 2+ or if security patterns detected
        if [ $APP_FILES -gt 2 ] || [ $AUTH_PATTERNS -gt 0 ] || [ $NETWORK_PATTERNS -gt 2 ] || [ "${{ github.event_name }}" = "schedule" ]; then
          echo "enable_codeql=true" >> $GITHUB_OUTPUT
          echo "🔍 Enabling comprehensive security analysis"
        else
          echo "enable_codeql=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Basic security checks only - comprehensive analysis for Stage 2+"
        fi
    
    - name: Initialize CodeQL (Advanced stages only)
      if: steps.security-scope.outputs.enable_codeql == 'true'
      uses: github/codeql-action/init@v3
      with:
        languages: java-kotlin
        build-mode: manual
    
    - name: Build for CodeQL analysis (Advanced stages only)
      if: steps.security-scope.outputs.enable_codeql == 'true'
      run: |
        echo "🏗️ Building for comprehensive security analysis..."
        # Manual build steps as required by CodeQL for Kotlin/Android
        # Use --rerun-tasks to prevent caching issues with CodeQL
        
        # Build common sources first
        ./gradlew :composeApp:compileKotlinMetadata --rerun-tasks
        
        # Build JVM target (generates bytecode for analysis)
        ./gradlew :composeApp:compileKotlinJvm --rerun-tasks
        ./gradlew :composeApp:compileJvmMainJava --rerun-tasks
        
        # Build Android target (generates bytecode for analysis)  
        ./gradlew :composeApp:compileDebugKotlinAndroid --rerun-tasks
        ./gradlew :composeApp:compileDebugJavaWithJavac --rerun-tasks
    
    - name: Perform CodeQL Analysis (Advanced stages only)
      if: steps.security-scope.outputs.enable_codeql == 'true'
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:java-kotlin"
    
    - name: Security patterns scan
      run: |
        echo "=== Security Patterns Analysis ===" > security-report.txt
        echo "Generated: $(date)" >> security-report.txt
        echo "" >> security-report.txt
        
        # Check for hardcoded secrets
        echo "## Hardcoded Secrets Check" >> security-report.txt
        if grep -r -E "(password|secret|key|token)\s*=\s*[\"'][^\"']+[\"']" composeApp/src/ --include="*.kt" | head -5; then
          echo "⚠️ Potential hardcoded secrets found" >> security-report.txt
        else
          echo "✅ No hardcoded secrets detected" >> security-report.txt
        fi
        
        # Check for SQL injection patterns
        echo "## SQL Injection Check" >> security-report.txt
        if grep -r -E "\\\$\{.*\}" composeApp/src/ --include="*.kt" | grep -i "sql\|query" | head -3; then
          echo "⚠️ Potential SQL injection patterns" >> security-report.txt
        else
          echo "✅ No SQL injection patterns found" >> security-report.txt
        fi
        
        # Check for unsafe deserialization
        echo "## Unsafe Deserialization Check" >> security-report.txt
        if grep -r -E "readObject|ObjectInputStream|Serializable" composeApp/src/ --include="*.kt" | head -3; then
          echo "⚠️ Potential unsafe deserialization" >> security-report.txt
        else
          echo "✅ No unsafe deserialization patterns" >> security-report.txt
        fi
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: security-report.txt

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: wrapper
        # cache-cleanup removed due to Gradle 9.0 compatibility issues
    
    - name: Generate SBOM (Software Bill of Materials)
      run: |
        echo "=== Software Bill of Materials ===" > sbom-report.txt
        echo "Generated: $(date)" >> sbom-report.txt
        echo "" >> sbom-report.txt
        
        echo "## Direct Dependencies" >> sbom-report.txt
        ./gradlew dependencies --configuration commonMainCompileClasspath | grep -E "^\\\+\\\-\\\-\\\-|^\\\\\\\-\\\-\\\-" >> sbom-report.txt || true
        
        echo "## Android Dependencies" >> sbom-report.txt
        ./gradlew dependencies --configuration androidMainCompileClasspath | grep -E "^\\\+\\\-\\\-\\\-|^\\\\\\\-\\\-\\\-" >> sbom-report.txt || true
    
    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Updates Available" >> sbom-report.txt
        ./gradlew dependencyUpdates >> sbom-report.txt 2>&1 || echo "Dependency update plugin not configured" >> sbom-report.txt
    
    - name: Analyze dependency licenses
      run: |
        echo "## License Analysis" >> sbom-report.txt
        
        # Look for license information in build files
        echo "### Build Configuration Licenses" >> sbom-report.txt
        grep -r -i "license\|apache\|mit\|gpl" composeApp/build.gradle.kts || echo "No explicit license declarations in build files" >> sbom-report.txt
    
    - name: Upload SBOM report
      uses: actions/upload-artifact@v4
      with:
        name: sbom-dependency-report
        path: sbom-report.txt

  # Build Security & Integrity
  build-security:
    name: Build Security & Integrity
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: wrapper
        # cache-cleanup removed due to Gradle 9.0 compatibility issues
    
    - name: Verify build reproducibility
      run: |
        echo "=== Build Security Report ===" > build-security.txt
        echo "Generated: $(date)" >> build-security.txt
        echo "" >> build-security.txt
        
        echo "## Build Reproducibility Test" >> build-security.txt
        
        # First build
        ./gradlew clean build --build-cache
        find composeApp/build -name "*.jar" -exec md5sum {} \; > checksums1.txt 2>/dev/null || echo "No JAR files to checksum"
        
        # Second build (should be identical)
        ./gradlew clean build --build-cache
        find composeApp/build -name "*.jar" -exec md5sum {} \; > checksums2.txt 2>/dev/null || echo "No JAR files to checksum"
        
        # Compare checksums
        if cmp -s checksums1.txt checksums2.txt; then
          echo "✅ Build is reproducible" >> build-security.txt
        else
          echo "⚠️ Build reproducibility issue detected" >> build-security.txt
          echo "Checksum differences:" >> build-security.txt
          diff checksums1.txt checksums2.txt >> build-security.txt || true
        fi
    
    - name: Validate Gradle wrapper integrity
      run: |
        echo "## Gradle Wrapper Security" >> build-security.txt
        
        # Check Gradle wrapper checksum
        if [ -f gradle/wrapper/gradle-wrapper.properties ]; then
          echo "Gradle wrapper version:" >> build-security.txt
          grep distributionUrl gradle/wrapper/gradle-wrapper.properties >> build-security.txt
          echo "✅ Gradle wrapper validated" >> build-security.txt
        else
          echo "❌ Gradle wrapper properties missing" >> build-security.txt
        fi
    
    - name: Check for build script injection
      run: |
        echo "## Build Script Security" >> build-security.txt
        
        # Look for potentially dangerous patterns in build scripts
        if grep -r -E "exec\(|Runtime\.getRuntime\(\)|ProcessBuilder" *.gradle.kts composeApp/*.gradle.kts; then
          echo "⚠️ Potentially dangerous build script patterns found" >> build-security.txt
        else
          echo "✅ No dangerous build script patterns detected" >> build-security.txt
        fi
    
    - name: Upload build security report
      uses: actions/upload-artifact@v4
      with:
        name: build-security-report
        path: |
          build-security.txt
          checksums*.txt

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-analysis, dependency-scan, build-security]
    if: always()
    
    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security dashboard
      run: |
        echo "# 🛡️ Security Analysis Dashboard" > security-dashboard.md
        echo "**Generated:** $(date)" >> security-dashboard.md
        echo "" >> security-dashboard.md
        
        echo "## 📊 Job Status Summary" >> security-dashboard.md
        echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> security-dashboard.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-dashboard.md
        echo "- Build Security: ${{ needs.build-security.result }}" >> security-dashboard.md
        echo "" >> security-dashboard.md
        
        # Aggregate findings
        echo "## 🔍 Key Findings" >> security-dashboard.md
        
        if [ -f security-analysis-report/security-report.txt ]; then
          echo "### Security Patterns" >> security-dashboard.md
          grep -E "✅|❌|⚠️" security-analysis-report/security-report.txt >> security-dashboard.md || echo "No critical patterns found"
        fi
        
        if [ -f sbom-dependency-report/sbom-report.txt ]; then
          echo "### Dependencies" >> security-dashboard.md
          grep -E "✅|❌|⚠️" sbom-dependency-report/sbom-report.txt >> security-dashboard.md || echo "Dependencies validated"
        fi
        
        if [ -f build-security-report/build-security.txt ]; then
          echo "### Build Security" >> security-dashboard.md
          grep -E "✅|❌|⚠️" build-security-report/build-security.txt >> security-dashboard.md || echo "Build security validated"
        fi
        
        echo "" >> security-dashboard.md
        echo "## 📋 Recommendations" >> security-dashboard.md
        echo "- Regular dependency updates" >> security-dashboard.md
        echo "- Monitor security advisories" >> security-dashboard.md
        echo "- Maintain clean architecture (Domain layer purity)" >> security-dashboard.md
    
    - name: Upload security dashboard
      uses: actions/upload-artifact@v4
      with:
        name: security-dashboard
        path: security-dashboard.md
    
    - name: Comment PR with security summary (on PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-dashboard.md')) {
            const summary = fs.readFileSync('security-dashboard.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
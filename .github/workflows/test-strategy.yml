name: Comprehensive Testing Strategy

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - domain
          - integration
          - performance

jobs:
  # Domain Logic Tests - Core business rules
  domain-tests:
    name: Domain Layer Tests
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.test_scope, 'domain') || github.event.inputs.test_scope == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Run domain tests with coverage
      run: |
        ./gradlew :composeApp:allTests --tests="*Domain*" --continue
        ./gradlew :composeApp:jvmTest --tests="*Card*" --tests="*Hand*" --tests="*Strategy*" --continue
    
    - name: Generate domain test report
      run: |
        echo "=== Domain Test Coverage Report ===" > domain-test-report.txt
        find . -name "TEST-*.xml" -exec cat {} \; | grep -E "(testcase|failure|error)" >> domain-test-report.txt || true
    
    - name: Upload domain test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: domain-test-results
        path: |
          domain-test-report.txt
          **/build/test-results/**
          **/build/reports/**

  # Integration Tests - Cross-layer validation
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.test_scope, 'integration') || github.event.inputs.test_scope == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Run integration tests
      run: |
        ./gradlew :composeApp:allTests --tests="*Integration*" --continue || echo "No integration tests found"
        ./gradlew :composeApp:jvmTest --tests="*UseCase*" --continue || echo "No use case tests found"
    
    - name: Test platform compatibility
      run: |
        echo "Testing compilation across all targets..."
        ./gradlew compileKotlinJvm
        ./gradlew compileKotlinAndroid
        ./gradlew compileKotlinWasmJs

  # Performance Tests - Runtime performance validation
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.test_scope, 'performance') || github.event.inputs.test_scope == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Build performance benchmarks
      run: |
        ./gradlew compileJvmMainKotlinMetadata
        ./gradlew jvmJar
    
    - name: Strategy engine performance test
      run: |
        echo "=== Strategy Engine Performance ===" > performance-results.txt
        echo "Date: $(date)" >> performance-results.txt
        
        # Basic performance validation
        time ./gradlew jvmTest --tests="*Strategy*" >> performance-results.txt 2>&1 || true
        
        # Memory usage estimation
        echo "=== Memory Analysis ===" >> performance-results.txt
        du -sh composeApp/build/libs/ >> performance-results.txt 2>/dev/null || echo "No JAR files found"
    
    - name: WASM bundle analysis
      run: |
        ./gradlew wasmJsBrowserDistribution
        echo "=== WASM Bundle Size Analysis ===" >> performance-results.txt
        ls -lah composeApp/build/dist/wasmJs/productionExecutable/ >> performance-results.txt || true
        
        # Analyze key files
        find composeApp/build/dist/wasmJs/productionExecutable/ -name "*.js" -o -name "*.wasm" | \
          xargs -I {} sh -c 'echo "File: {}, Size: $(du -h "{}" | cut -f1)"' >> performance-results.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.txt

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [domain-tests, integration-tests, performance-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate comprehensive test summary
      run: |
        echo "# Comprehensive Test Summary" > test-summary.md
        echo "Generated: $(date)" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Job Results" >> test-summary.md
        echo "- Domain Tests: ${{ needs.domain-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        # Add performance data if available
        if [ -f performance-results/performance-results.txt ]; then
          echo "## Performance Metrics" >> test-summary.md
          cat performance-results/performance-results.txt >> test-summary.md
        fi
        
        # Add domain test data if available
        if [ -f domain-test-results/domain-test-report.txt ]; then
          echo "## Domain Test Coverage" >> test-summary.md
          cat domain-test-results/domain-test-report.txt >> test-summary.md
        fi
    
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-summary
        path: test-summary.md
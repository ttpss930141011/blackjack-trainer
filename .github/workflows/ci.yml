name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096M -Dfile.encoding=UTF-8 -Dorg.gradle.caching=true -Dorg.gradle.configuration-cache=true"

jobs:
  # Quality Gates - Fast feedback on code quality
  quality-check:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
    
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
    
    - name: Check code compilation
      run: ./gradlew compileKotlinMetadata compileCommonMainKotlinMetadata
    
    - name: Run detekt static analysis
      run: ./gradlew detekt || echo "Detekt not configured - skipping"
      continue-on-error: true
    
    - name: Check Gradle build health
      run: ./gradlew projects dependencies --dry-run

  # Unit Tests - Core business logic validation
  test-multiplatform:
    name: Tests (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: quality-check
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: JVM
            os: ubuntu-latest
            tasks: ":composeApp:jvmTest"
          - platform: Android
            os: ubuntu-latest 
            tasks: ":composeApp:testDebugUnitTest"
          - platform: WASM
            os: ubuntu-latest
            tasks: ":composeApp:wasmJsTest"
          - platform: All-Targets
            os: ubuntu-latest
            tasks: ":composeApp:allTests"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Setup Android SDK (Android tests only)
      if: matrix.platform == 'Android'
      uses: android-actions/setup-android@v3
    
    - name: Run ${{ matrix.platform }} tests
      run: ./gradlew ${{ matrix.tasks }} --continue
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          **/build/test-results/**
          **/build/reports/**
        retention-days: 7

  # Build All Platforms - Production artifacts
  build-multiplatform:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: [quality-check, test-multiplatform]
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Android
            os: ubuntu-latest
            tasks: "assembleDebug assembleRelease"
            artifacts: "composeApp/build/outputs/**/*"
          - platform: Desktop-JVM
            os: ubuntu-latest
            tasks: "packageUberJarForCurrentOS"
            artifacts: "composeApp/build/compose/jars/**"
          - platform: WASM-Web
            os: ubuntu-latest
            tasks: "wasmJsBrowserDistribution"
            artifacts: "composeApp/build/dist/**"
          - platform: Desktop-Windows
            os: windows-latest
            tasks: "packageMsi"
            artifacts: "composeApp/build/compose/binaries/**"
          - platform: Desktop-Mac
            os: macos-latest
            tasks: "packageDmg"
            artifacts: "composeApp/build/compose/binaries/**"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Setup Android SDK (Android builds only)
      if: matrix.platform == 'Android'
      uses: android-actions/setup-android@v3
    
    - name: Build ${{ matrix.platform }}
      run: ./gradlew ${{ matrix.tasks }} --build-cache
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.platform }}
        path: ${{ matrix.artifacts }}
        retention-days: 30

  # Security Scanning - Dependency and vulnerability analysis
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Generate dependency report
      run: ./gradlew dependencies > dependencies.txt
    
    - name: Run dependency check
      run: ./gradlew dependencyCheckAnalyze || echo "OWASP Dependency Check not configured - skipping"
      continue-on-error: true
    
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: kotlin, java
    
    - name: Build for CodeQL
      run: ./gradlew compileKotlinMetadata
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          dependencies.txt
          **/build/reports/dependency-check-report.html
        retention-days: 30

  # Integration Tests - End-to-end validation
  e2e-tests:
    name: E2E Tests (Web)
    runs-on: ubuntu-latest
    needs: [build-multiplatform]
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Build and serve WASM app
      run: |
        ./gradlew wasmJsBrowserDistribution
        python -m http.server 8080 --directory composeApp/build/dist/wasmJs/productionExecutable &
        sleep 5
    
    - name: Run basic smoke tests
      run: |
        curl -f http://localhost:8080 || exit 1
        echo "Basic web app accessibility verified"
    
    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          screenshots/
        retention-days: 7

  # Performance Monitoring - Build and runtime performance
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-multiplatform
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Build performance analysis
      run: |
        echo "=== Build Performance Report ===" > performance-report.txt
        echo "Date: $(date)" >> performance-report.txt
        time ./gradlew clean build --profile >> performance-report.txt 2>&1
    
    - name: Analyze WASM bundle size
      run: |
        ./gradlew wasmJsBrowserDistribution
        ls -lah composeApp/build/dist/wasmJs/productionExecutable/ >> performance-report.txt
        du -sh composeApp/build/dist/wasmJs/productionExecutable/ >> performance-report.txt
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: |
          performance-report.txt
          **/build/reports/profile/**
        retention-days: 30

  # Release Preparation - Tag-triggered release builds
  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test-multiplatform, build-multiplatform, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Build all release artifacts
      run: |
        ./gradlew assembleRelease
        ./gradlew wasmJsBrowserDistribution
        ./gradlew packageUberJarForCurrentOS
    
    - name: Create release archive
      run: |
        mkdir -p release-artifacts
        cp composeApp/build/outputs/apk/release/*.apk release-artifacts/ || true
        cp -r composeApp/build/dist/wasmJs/productionExecutable release-artifacts/web || true
        cp composeApp/build/compose/jars/*.jar release-artifacts/ || true
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ github.ref_name }}
        path: release-artifacts/
        retention-days: 90
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/**
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Status Summary - Aggregate results
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality-check, test-multiplatform, build-multiplatform, security-scan]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "=== CI Pipeline Summary ==="
        echo "Quality Check: ${{ needs.quality-check.result }}"
        echo "Tests: ${{ needs.test-multiplatform.result }}"
        echo "Build: ${{ needs.build-multiplatform.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.quality-check.result }}" != "success" ]] || 
           [[ "${{ needs.test-multiplatform.result }}" != "success" ]] || 
           [[ "${{ needs.build-multiplatform.result }}" != "success" ]]; then
          echo "❌ CI Pipeline Failed"
          exit 1
        else
          echo "✅ CI Pipeline Passed"
        fi